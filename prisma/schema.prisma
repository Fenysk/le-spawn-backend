generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(cuid())

  email String? @unique

  hashedPassword     String?
  hashedRefreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[] @default([common])

  profile     Profile?     @relation("ProfileToUser")
  collections Collection[] @relation("CollectionToUser")

  gameReports GameReport[] @relation("GameReportToUser")
}

model Profile {
  pseudo      String? @unique
  displayName String?
  biography   String?
  link        String?
  avatarUrl   String?

  userId String @id @unique
  user   User   @relation("ProfileToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id         String @id @unique @default(uuid())
  igdbGameId Int?   @unique

  isIgdbBanned Boolean @default(false)

  barcodes String[]

  category GameCategoryEnum
  coverUrl String?

  firstReleaseDate DateTime?

  franchises String[]
  genres     String[]

  name String

  screenshotsUrl String[]

  storyline String?
  summary   String?

  platformsRelation  ManyGamePlatform[]   @relation("ManyGamePlatformToGame")
  gameCollectionItem GameCollectionItem[] @relation("GameCollectionItemToGame")

  reports GameReport[] @relation("GameReportToGame")
}

model Platform {
  id             String @id @unique @default(uuid())
  igdbPlatformId Int?   @unique

  name         String
  abbreviation String?

  generation Int?

  gamesRelation ManyGamePlatform[] @relation("ManyGamePlatformToPlatform")
}

model Collection {
  id String @id @unique @default(uuid())

  title String

  gameItems GameCollectionItem[] @relation("GameCollectionItemToCollection")

  userId String
  user   User   @relation("CollectionToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model GameCollectionItem {
  id String @id @unique @default(uuid())

  hasBox   Boolean
  hasGame  Boolean
  hasPaper Boolean

  stateBox   String?
  stateGame  String?
  statePaper String?

  gameId String
  game   Game   @relation("GameCollectionItemToGame", fields: [gameId], references: [id])

  collectionId String
  collection   Collection @relation("GameCollectionItemToCollection", fields: [collectionId], references: [id])

  createdAt DateTime @default(now())
}

model ManyGamePlatform {
  game   Game   @relation("ManyGamePlatformToGame", fields: [gameId], references: [id], onDelete: Cascade)
  gameId String

  platform   Platform @relation("ManyGamePlatformToPlatform", fields: [platformId], references: [id], onDelete: Cascade)
  platformId String

  @@id([gameId, platformId])
  @@unique([gameId, platformId])
}

model GameReport {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status GameReportStatus @default(pending)

  explication String

  gameId String
  game   Game   @relation("GameReportToGame", fields: [gameId], references: [id], onDelete: Cascade)

  reporterId String
  reporter   User   @relation("GameReportToUser", fields: [reporterId], references: [id], onDelete: Cascade)
}

enum Role {
  common
  verified
  admin
}

enum GameCategoryEnum {
  mainGame
  dlcAddon
  expansion
  bundle
  standaloneExpansion
  mod
  episode
  season
  remake
  remaster
  expandedGame
  port
  fork
  pack
  update
}

enum GameReportStatus {
  pending
  inProgress
  resolved
  rejected
}